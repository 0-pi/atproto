// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package types

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *SignedRoot) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write([]byte{162}); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.User (cid.Cid) (struct)
	if len("user") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"user\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("user"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("user")); err != nil {
		return err
	}

	if err := cbg.WriteCidBuf(scratch, w, t.User); err != nil {
		return xerrors.Errorf("failed to write cid field t.User: %w", err)
	}

	// t.Signature ([]uint8) (slice)
	if len("sig") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"sig\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("sig"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("sig")); err != nil {
		return err
	}

	if len(t.Signature) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Signature was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajByteString, uint64(len(t.Signature))); err != nil {
		return err
	}

	if _, err := w.Write(t.Signature[:]); err != nil {
		return err
	}
	return nil
}

func (t *SignedRoot) UnmarshalCBOR(r io.Reader) error {
	*t = SignedRoot{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("SignedRoot: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadStringBuf(br, scratch)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.User (cid.Cid) (struct)
		case "user":

			{

				c, err := cbg.ReadCid(br)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.User: %w", err)
				}

				t.User = c

			}
			// t.Signature ([]uint8) (slice)
		case "sig":

			maj, extra, err = cbg.CborReadHeaderBuf(br, scratch)
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.Signature: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Signature = make([]uint8, extra)
			}

			if _, err := io.ReadFull(br, t.Signature[:]); err != nil {
				return err
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *User) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write([]byte{164}); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.DID (string) (string)
	if len("did") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"did\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("did"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("did")); err != nil {
		return err
	}

	if len(t.DID) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.DID was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.DID))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.DID)); err != nil {
		return err
	}

	// t.Name (string) (string)
	if len("name") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"name\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("name"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("name")); err != nil {
		return err
	}

	if len(t.Name) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Name was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Name))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Name)); err != nil {
		return err
	}

	// t.PostsRoot (cid.Cid) (struct)
	if len("postsRoot") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"postsRoot\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("postsRoot"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("postsRoot")); err != nil {
		return err
	}

	if err := cbg.WriteCidBuf(scratch, w, t.PostsRoot); err != nil {
		return xerrors.Errorf("failed to write cid field t.PostsRoot: %w", err)
	}

	// t.NextPost (int64) (int64)
	if len("nextPost") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"nextPost\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("nextPost"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("nextPost")); err != nil {
		return err
	}

	if t.NextPost >= 0 {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajUnsignedInt, uint64(t.NextPost)); err != nil {
			return err
		}
	} else {
		if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajNegativeInt, uint64(-t.NextPost-1)); err != nil {
			return err
		}
	}
	return nil
}

func (t *User) UnmarshalCBOR(r io.Reader) error {
	*t = User{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("User: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadStringBuf(br, scratch)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.DID (string) (string)
		case "did":

			{
				sval, err := cbg.ReadStringBuf(br, scratch)
				if err != nil {
					return err
				}

				t.DID = string(sval)
			}
			// t.Name (string) (string)
		case "name":

			{
				sval, err := cbg.ReadStringBuf(br, scratch)
				if err != nil {
					return err
				}

				t.Name = string(sval)
			}
			// t.PostsRoot (cid.Cid) (struct)
		case "postsRoot":

			{

				c, err := cbg.ReadCid(br)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.PostsRoot: %w", err)
				}

				t.PostsRoot = c

			}
			// t.NextPost (int64) (int64)
		case "nextPost":
			{
				maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.NextPost = int64(extraI)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *Post) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}
	if _, err := w.Write([]byte{162}); err != nil {
		return err
	}

	scratch := make([]byte, 9)

	// t.Timestamp (string) (string)
	if len("timestamp") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"timestamp\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("timestamp"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("timestamp")); err != nil {
		return err
	}

	if len(t.Timestamp) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Timestamp was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Timestamp))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Timestamp)); err != nil {
		return err
	}

	// t.Body (string) (string)
	if len("body") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"body\" was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len("body"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("body")); err != nil {
		return err
	}

	if len(t.Body) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Body was too long")
	}

	if err := cbg.WriteMajorTypeHeaderBuf(scratch, w, cbg.MajTextString, uint64(len(t.Body))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Body)); err != nil {
		return err
	}
	return nil
}

func (t *Post) UnmarshalCBOR(r io.Reader) error {
	*t = Post{}

	br := cbg.GetPeeker(r)
	scratch := make([]byte, 8)

	maj, extra, err := cbg.CborReadHeaderBuf(br, scratch)
	if err != nil {
		return err
	}
	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("Post: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadStringBuf(br, scratch)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Timestamp (string) (string)
		case "timestamp":

			{
				sval, err := cbg.ReadStringBuf(br, scratch)
				if err != nil {
					return err
				}

				t.Timestamp = string(sval)
			}
			// t.Body (string) (string)
		case "body":

			{
				sval, err := cbg.ReadStringBuf(br, scratch)
				if err != nil {
					return err
				}

				t.Body = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
